{"version":3,"sources":["webpack://keksobooking/./source/js/form.js","webpack://keksobooking/./source/js/map.js","webpack://keksobooking/./source/js/popup.js","webpack://keksobooking/./source/js/util.js","webpack://keksobooking/./source/js/map-filtering-form.js","webpack://keksobooking/./source/js/api.js","webpack://keksobooking/./source/js/main.js"],"names":["AlowedTypes","mapFiltersForm","document","querySelector","addForm","addressField","avatarField","offerPhotosField","photosBlock","addFormResetButton","addFormTypeHousing","addFormPricePerNight","addFormTimeIn","addFormTimeOut","addFormRoomNumber","addFormCapacity","addFormTitle","makeFormInactive","form","formClass","classList","add","Array","from","children","forEach","value","setAttribute","makeFormActive","remove","removeAttribute","resetForm","marker","reset","setCustomValidity","setLatLng","setTimeout","getLatLng","lat","toFixed","lng","onErrorSendFormMessage","message","content","cloneNode","addEventListener","evt","keyCode","style","zIndex","appendChild","map","mainMarker","mainMarkerPosition","offersMarkers","similarOffersMarkerIcon","L","icon","iconUrl","iconSize","iconAnchor","mainMarkerIcon","makeMarker","icoMarker","draggable","renderOffersMarkers","data","createPopupFunc","slice","location","popup","bindPopup","keepInView","push","addTo","TYPES","RUSSIANTYPES","offerTemplate","fillElement","valueMassive","elementTag","elementClass","isFeature","isOfferPhoto","elementsContainer","createDocumentFragment","elementsListItem","tagName","className","text","element","createElement","src","width","height","alt","createPopupElement","author","offer","offerElement","textContent","title","address","price","currentValue","currentIndex","russianType","index","makeRusType","type","rooms","guests","checkin","checkout","innerHTML","features","description","photos","avatar","mapSelects","querySelectorAll","housingTypeFilter","housingPriceFilter","housingRoomsFilter","housingQuestsFilter","mapCheckboxes","filterOffers","filteredData","filter","object","filterByHousingType","determinePriceInterval","filterByHousingPrice","toString","filterByHousingRooms","filterByHousingGuests","checkbox","checked","some","filterByAdditionalFeatures","onLoad","onMoveEnd","functionForSendData","onSuccessValidation","onSuccess","onError","on","setView","tileLayer","attribution","position","target","fetch","method","headers","body","then","response","ok","catch","minLength","getAttribute","maxLength","valueLength","length","reportValidity","titleValidation","minPrice","determineMinPrice","parseInt","field","determineCapacity","configureFunctionalityResetButton","preventDefault","formData","FormData","onSuccessSendFormMessage","configureFunctionalitySubmitButton","file","isThisAvatarField","reader","FileReader","result","dataURL","photo","addImageToPhotoBlock","readAsDataURL","files","fileName","name","toUpperCase","it","endsWith","callback","concat","timeout","timeoutId","clearTimeout","debounce","setFiltering","alertShowTime","alertContainer","left","top","right","padding","fontSize","textAlign","backgroundColor","append","status","json","Error","error"],"mappings":"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","file":"main.bundle.js","sourcesContent":["const AlowedTypes = [\n  'JPEG',\n  'JPG',\n  'PNG',\n];\n\nconst mapFiltersForm = document.querySelector('.map__filters');\nconst addForm = document.querySelector('.ad-form');\nconst addressField = addForm.querySelector('#address');\nconst avatarField = addForm.querySelector('#avatar');\nconst offerPhotosField = addForm.querySelector('#images');\nconst photosBlock = addForm.querySelector('.ad-form__photo');\nconst addFormResetButton = addForm.querySelector('.ad-form__reset');\nconst addFormTypeHousing = addForm.querySelector('#type');\nconst addFormPricePerNight = addForm.querySelector('#price');\nconst addFormTimeIn = addForm.querySelector('#timein');\nconst addFormTimeOut = addForm.querySelector('#timeout');\nconst addFormRoomNumber = addForm.querySelector('#room_number');\nconst addFormCapacity = addForm.querySelector('#capacity');\nconst addFormTitle = addForm.querySelector('#title');\n\n/**\n * Функция делает переданную форму неактивной и добавляет атрибут disabled внутренним полям\n *\n * @param {object} form - форма, которую необходимо сделать неактивной\n * @param {string} - класс формы\n */\nconst makeFormInactive = (form, formClass) => {\n  form.classList.add(formClass + '--disabled');\n  Array.from(form.children).forEach((value) => {\n    value.setAttribute('disabled', 'disabled');\n  });\n};\n\n/**\n * Функция делает переданную форму активной и удаляет атрибут disabled у внутренних полей\n *\n * @param {object} form - форма, которую необходимо сделать активной\n * @param {string} - класс формы\n */\nconst makeFormActive = (form, formClass) => {\n  form.classList.remove(formClass + '--disabled');\n  Array.from(form.children).forEach((value) => {\n    value.removeAttribute('disabled');\n  });\n};\n\n/**\n * Функция делает формы фильтрации и подачи объявлений на странице неактивными\n */\nconst makeFormsInactive = () => {\n  makeFormInactive(mapFiltersForm, '.map__filters');\n  makeFormInactive(addForm, '.ad-form');\n};\n\n/**\n * Функция делает форму для добавления нового объявления активной\n */\nconst makeAddFormActive = () => {\n  makeFormActive(addForm, '.ad-form');\n};\n\n/**\n * Функция делает форму для фильтрации активной\n */\nconst makeMapFiltersFormActive = () => {\n  makeFormActive(mapFiltersForm, '.map__filters');\n};\n\n/**\n * Функция устанавливает в поле Адрес значения по-умолчанию и добавляет ему атрибут readonly\n */\nconst setAddressFieldDefaultValue = () => {\n  addressField.value = 35.68170 + ', ' + 139.75388;\n  addressField.setAttribute('readonly', 'readonly');\n};\n\n/**\n * Функция устанавливает полю 'Адрес' значения параметра position\n */\nconst setAddressFieldValue = (position) => {\n  addressField.value = position.lat.toFixed(5) + ', '  + position.lng.toFixed(5);\n}\n\n\n\n/**\n * Функция определяющая значения поля \"Количество мест\" в зависимости от поля  \"Количество комнат\"\n *\n * @returns {Array} значения, которые может принимать поле \"Количество мест\"\n */\nconst determineCapacity = () => {\n  const addFormRoomNumberValue = addFormRoomNumber.value;\n  switch (addFormRoomNumberValue) {\n    case '100':\n      return [\n        '0',\n      ];\n    case '3':\n      return [\n        '3',\n        '2',\n        '1',\n      ];\n    case '2':\n      return [\n        '2',\n        '1',\n      ];\n    case '1':\n      return [\n        '1',\n      ];\n  }\n};\n\n/**\n * Функция определяющая минимальную цену за ночь в соответствии с типом жилья\n *\n * @returns {number} - минимальная цена за ночь\n */\nconst determineMinPrice = () => {\n  const addFormTypeHousingValue = addFormTypeHousing.value;\n  switch (addFormTypeHousingValue) {\n    case 'bungalow':\n      return 0;\n    case 'flat':\n      return 1000;\n    case 'house':\n      return 5000;\n    case 'palace':\n      return 10000;\n  }\n};\n\n/**\n * Функция в зависимости от значений поля \"Количество комнат\" вводит ограничения на поле \"Количество мест\"\n */\nconst validationCapacity = () => {\n  const fields = [addFormRoomNumber, addFormCapacity];\n  fields.forEach((field) => {\n    field.addEventListener('change', () => {\n      const allowedValues = determineCapacity();\n      const isValueContains = allowedValues.some(value => value === addFormCapacity.value);\n      (isValueContains)\n        ? addFormCapacity.setCustomValidity('')\n        : addFormCapacity.setCustomValidity('Неподходящее значение')\n      addFormCapacity.reportValidity();\n    })\n  })\n};\n\n/**\n * Функция синхронизирующая два поля в разделе  'Время заезда и выезда'\n */\nconst synchronizeField = () => {\n  const fields = [addFormTimeIn, addFormTimeOut]\n  fields.forEach((field) => {\n    field.addEventListener('change', (evt) =>{\n      (evt.target === addFormTimeOut)\n        ? addFormTimeIn.value = addFormTimeOut.value\n        : addFormTimeOut.value = addFormTimeIn.value;\n    });\n  });\n};\n\n/**\n * Функция для валидации количества символов поля \"Заголовок объявления\"\n */\nconst titleValidation = () => {\n  const minLength = addFormTitle.getAttribute('minlength');\n  const maxLength = addFormTitle.getAttribute('maxlength');\n  addFormTitle.addEventListener('input', () => {\n    const valueLength = addFormTitle.value.length;\n    if (valueLength < minLength) {\n      addFormTitle.setCustomValidity('Еще ' + (minLength - valueLength) + ' символов');\n    }else if (valueLength > maxLength) {\n      addFormTitle.setCustomValidity('Удалите ' + (valueLength - maxLength) + ' символов');\n    }else {\n      addFormTitle.setCustomValidity('');\n    }\n    addFormTitle.reportValidity();\n  });\n}\n\n/**\n * Функция для валидации поля 'Цена за ночь'\n */\nconst PricePerNightValidation = () => {\n  addFormTypeHousing.addEventListener('change', () => {\n    const minPrice = determineMinPrice();\n    addFormPricePerNight.setAttribute('min', minPrice);\n    addFormPricePerNight.setAttribute('placeholder', minPrice);\n    if (addFormPricePerNight.value) {\n      (addFormPricePerNight.value < minPrice)\n        ? addFormPricePerNight.setCustomValidity('Цена за указанный тип жилья не может быть ниже ' + minPrice)\n        : addFormPricePerNight.setCustomValidity('');\n      addFormPricePerNight.reportValidity();\n    }\n  });\n  addFormPricePerNight.addEventListener('input', () => {\n    if (addFormPricePerNight.value) {\n      const minPrice = parseInt(addFormPricePerNight.getAttribute('min'), 10);\n      (addFormPricePerNight.value < minPrice)\n        ? addFormPricePerNight.setCustomValidity('Цена за указанный тип жилья не может быть ниже ' + minPrice)\n        : addFormPricePerNight.setCustomValidity('');\n      addFormPricePerNight.reportValidity();\n    }\n  });\n};\n\nconst addImageToPhotoBlock = (dataURL) => {\n  const photo = document.createElement('img');\n  photo.src = dataURL;\n  photo.setAttribute('width', '40');\n  photo.setAttribute('height', '44');\n  photo.alt = 'Фотография жилья'\n  photosBlock.appendChild(photo);\n}\n/**\n * Функция заменяет изображение аватара на загруженный файл в соответствующем блоке\n *  или вызывает функцию, которая добавляет фотографию в блок с фото.\n *\n * @param {object} file - файл изображение, которое необходимо отобразить на странице\n * @param {boolean} isThisAvatarField - результат проверки поля, необходимый для того, чтобы добавить файл в нужный блок\n * @param {function} createElementFunction - функция, которая может создать DOM элемент\n */\nconst displayUploadedImage = (file, isThisAvatarField) => {\n  const reader = new FileReader;\n  reader.addEventListener('load',() => {\n    (isThisAvatarField)\n      ? addForm.querySelector('#avatar-image').src = reader.result\n      : addImageToPhotoBlock(reader.result)\n  })\n  reader.readAsDataURL(file);\n}\n/**\n * Функция проверяющая, что загруженный файл имеет допустимое расширение\n *\n * @param {function} onSuccessValidation - функция, которую необходимо выполнить при успешной валидации загруженного файла\n *\n */\nconst validationImageField = (onSuccessValidation) => {\n  const imageFields = [offerPhotosField,avatarField];\n  imageFields.forEach((field) => {\n    const isThisAvatarField = (field === avatarField);\n    field.addEventListener('change', () => {\n      field.setCustomValidity('');\n      const files = Array.from(field.files);\n      files.forEach((file) => {\n        const fileName = file.name.toUpperCase();\n        const isFileAllowed = AlowedTypes.some((it) => {\n          return fileName.endsWith(it);\n        });\n        return (isFileAllowed)\n          ? onSuccessValidation(file, isThisAvatarField)\n          : field.setCustomValidity('Неверный формат изображения');\n      })\n      field.reportValidity();\n    })\n  })\n}\n\n/**\n * Функция сбрасывает поля форм, а так же возвращает маркер синхронизированный с полем 'Адрес' и\n * значение самого поля в значения по-умолчанию\n *\n * @param {object} marker - маркер, связанный с полем 'Адрес'\n */\nconst resetForm = (marker) => {\n  addForm.reset();\n  addFormCapacity.setCustomValidity('');\n  addFormPricePerNight.setCustomValidity('');\n  addFormTitle.setCustomValidity('');\n  marker.setLatLng(\n    [\n      35.68170,\n      139.75388,\n    ]);\n  setTimeout(\n    () => {\n      addressField.value = marker.getLatLng().lat.toFixed(5) + ', '  + marker.getLatLng().lng.toFixed(5);\n    } , 0);\n}\n\n/**\n * Функция настраивающая работу кнопки 'очистить'\n */\nconst configureFunctionalityResetButton = (marker) => {\n  addFormResetButton.addEventListener('click', () => resetForm(marker));\n}\n\n/**\n * Функция, показывающая сообщение об успешной отправке формы\n */\nconst onSuccessSendFormMessage = () => {\n  const message = document.querySelector('#success').content.querySelector('.success').cloneNode(true);\n  document.addEventListener('keydown',(evt) => {\n    if (evt.keyCode === 27){\n      message.remove();\n    }\n  });\n  document.addEventListener('click',() => {\n    message.remove();\n  });\n  message.style.zIndex = 400;\n  document.querySelector('main').appendChild(message);\n};\n\n/**\n * Функция, показывающая сообщение об ошибке при отправке формы\n */\nconst onErrorSendFormMessage = () => {\n  const message = document.querySelector('#error').content.querySelector('.error').cloneNode(true);\n  document.addEventListener('keydown',(evt) => {\n    if (evt.keyCode === 27){\n      message.remove();\n    }\n  });\n  document.addEventListener('click',() => {\n    message.remove();\n  });\n  message.style.zIndex = 400;\n  document.querySelector('main').appendChild(message);\n};\n\n/**\n * Функция создающая форме событие по submit, отправляющее данные с формы с помощью переданной функции\n *\n * @param {function} functionForSendData - Функция выполняющая отправку собранных данных\n */\nconst configureFunctionalitySubmitButton = (functionForSendData) => {\n  addForm.addEventListener('submit', (evt) => {\n    evt.preventDefault();\n    const formData = new FormData(evt.target);\n    functionForSendData(\n      formData,\n      () => {\n        onSuccessSendFormMessage(),\n        resetForm()\n      },\n      onErrorSendFormMessage,\n    );\n  });\n}\n\n/**\n * Функция, конфигурирующая и валидирующая логику работы полей формы подачи объявления\n *\n * @param {object} marker - маркер, значения которого будут сбрасываться при очистке формы\n * @param {function} functionForSendData - Функция, которая отправит данные собранные в форме\n */\nconst configureAddForm = (marker, functionForSendData) => {\n  titleValidation();\n  PricePerNightValidation();\n  validationCapacity();\n  setAddressFieldDefaultValue();\n  synchronizeField();\n  configureFunctionalityResetButton(marker);\n  configureFunctionalitySubmitButton(functionForSendData);\n  validationImageField(displayUploadedImage, true);\n};\n\n\nexport {\n  resetForm,\n  makeFormsInactive,\n  makeAddFormActive,\n  setAddressFieldValue,\n  makeMapFiltersFormActive,\n  configureAddForm\n};\n","/* global  L:readonly */\n/**\n * Основные переменые модуля\n */\nconst NUMBER_RENDERED_OFFERS_MARKERS = 10;\nlet map = {};\nlet mainMarker = {};\nlet mainMarkerPosition = {};\nlet offersMarkers = [];\n\n/**\n * Иконки для разных маркеров\n */\nconst similarOffersMarkerIcon = L.icon({\n  iconUrl: '../img/pin.svg',\n  iconSize: [40, 40],\n  iconAnchor: [20, 40],\n});\n\nconst mainMarkerIcon = L.icon({\n  iconUrl: '../img/main-pin.svg',\n  iconSize: [52, 52],\n  iconAnchor: [26, 52],\n});\n\n/**\n * Функция для создания карты с событием при успешной загрузке\n *\n * @param {function} onLoad - Функция, которая выполнится при успешной загрузке карты\n */\nconst initializeMap = (onLoad) => {\n  map = L.map('map-canvas')\n    .on('load',() => {\n      onLoad();\n    })\n    .setView({\n      lat:35.681700,\n      lng:139.753882,\n    }, 10)\n\n  L.tileLayer(\n    'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n    {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    },\n  ).addTo(map);\n};\n\n/**\n * Функция, создающая маркер\n *\n * @param {number} lat - первая координата маркера\n * @param {number} lng - вторая координата маркера\n * @param {object} icoMarker - иконка маркера\n * @param {boolean} draggable - возможность передвигать маркер\n *\n * @return {object} маркер с заданными параметрами\n */\nconst makeMarker = ( lat, lng, icoMarker, draggable) => {\n  const marker = L.marker(\n    {\n      lat: lat,\n      lng: lng,\n    },\n    {\n      draggable: draggable,\n      icon: icoMarker,\n    },\n  );\n  return marker;\n};\n\n/**\n * Функция, создающая главный маркер\n *\n * @param {function} onMoveEnd - функция, которую необходимо выполнить при завершении передвижения маркера\n */\nconst createMainMarker = (onMoveEnd) => {\n  mainMarker = makeMarker(35.68170, 139.75388, mainMarkerIcon, true)\n    .on('moveend', (evt) => {\n      mainMarkerPosition = evt.target.getLatLng();\n      onMoveEnd(mainMarkerPosition);\n    });\n  mainMarker.addTo(map);\n};\n\n/**\n * Функция для создания нескольких обьявлений и добавления им попапов\n *\n * @param {object} data - данные для формирования маркеров объявлений и их попапов\n * @param {function} createPopupFunc - функция, создающая попап для маркера обьявления\n */\nconst renderOffersMarkers = (data, createPopupFunc) => {\n  if (offersMarkers) {\n    offersMarkers.forEach((marker) => {\n      marker.remove();\n    })\n    offersMarkers =[];\n  }\n  const renderedData =  data.slice(0,NUMBER_RENDERED_OFFERS_MARKERS);\n  renderedData.forEach((value) => {\n    const marker = makeMarker(value.location.lat, value.location.lng, similarOffersMarkerIcon, false);\n    const popup = createPopupFunc(value)\n    marker.bindPopup(popup,\n      {\n        keepInView: true,\n      },\n    );\n    offersMarkers.push(marker);\n  });\n  offersMarkers.forEach((marker) => {\n    marker.addTo(map);\n  })\n}\n\nexport {initializeMap, createMainMarker, renderOffersMarkers, mainMarker}\n","import {createElement} from './util.js'\n\nconst TYPES = [\n  'palace',\n  'flat',\n  'house',\n  'bungalow',\n]\n\nconst RUSSIANTYPES = [\n  'Дворец',\n  'Квартира',\n  'Дом',\n  'Бунгало',\n]\nconst offerTemplate = document.querySelector('#card').content.querySelector('.popup')\n\n/**\n * Функция, возвращающая значение типа жилья на русском языке.\n *\n * @param {string} currentValue - текущее значение жилья(на английском языке)\n *\n * @returns возвращает значение типа жилья на русском языке\n */\nconst makeRusType = (currentValue) => {\n  let currentIndex = 0;\n  let russianType = '';\n  TYPES.forEach((value, index) => {\n    if (value === currentValue) {\n      currentIndex = index;\n    }\n  });\n  russianType = RUSSIANTYPES[currentIndex];\n  return russianType;\n};\n\n/**\n * Функция, создающая наполнение для блоков-контейнеров popup__features и popup__photos\n *\n * @param {Array} valueMassive - массив данных для генерации элементов\n * @param {string} elementTag - тэг формируемых элементов\n * @param {string} elementClass - класс формируемых элементов\n * @param {boolean} isFeature - проверка является ли формируемый список списком преимуществ\n * @param {boolean} isOfferPhoto - проаерка является ли формируемый список списком фотографий\n *\n * @return {DocumentFragment} возвращает фрагмент документа с разметкой для блоков контейнеров\n */\nconst fillElement = (valueMassive, elementTag, elementClass, isFeature, isOfferPhoto) => {\n  const elementsContainer = document.createDocumentFragment();\n  valueMassive.forEach((value) => {\n    const elementsListItem = createElement(elementTag, elementClass);\n    if (isFeature) {\n      elementsListItem.classList.add('popup__feature--'+ value);\n    }\n    if (isOfferPhoto) {\n      elementsListItem.src = value;\n      elementsListItem.width = 45;\n      elementsListItem.height = 40;\n      elementsListItem.alt = 'Фотография жилья';\n    }\n    elementsContainer.appendChild(elementsListItem);\n  });\n  return elementsContainer;\n};\n\n/**\n * Функция создает разметку попапа для маркера предложения и заполняет его актуальными данными\n *\n * @param {object} param0 - объект с данными, необходимыми для формирования попапа\n *\n * @returns возвращает сформированный элемент-попап предложения\n */\nconst createPopupElement = ({author, offer}) => {\n  const offerElement = offerTemplate.cloneNode(true);\n  offerElement.querySelector('.popup__title').textContent = offer.title;\n  offerElement.querySelector('.popup__text--address').textContent = offer.address;\n  offerElement.querySelector('.popup__text--price').textContent = offer.price + ' ₽/ночь';\n  offerElement.querySelector('.popup__type').textContent = makeRusType(offer.type)\n  offerElement.querySelector('.popup__text--capacity').textContent = offer.rooms + ' комнаты для ' + offer.guests + ' гостей'\n  offerElement.querySelector('.popup__text--time').textContent = offer.checkin + ' выезд до ' + offer.checkout;\n  offerElement.querySelector('.popup__features').innerHTML = '';\n  offerElement.querySelector('.popup__features').appendChild(fillElement(offer.features, 'li', 'popup__feature', true));\n  offerElement.querySelector('.popup__description').textContent = offer.description;\n  offerElement.querySelector('.popup__photos').innerHTML = '';\n  offerElement.querySelector('.popup__photos').appendChild(fillElement(offer.photos, 'img', 'popup__photo', false, true));\n  offerElement.querySelector('.popup__avatar').src = author.avatar;\n  return offerElement;\n};\n\nexport {createPopupElement};\n","/**\n * Функция, создающая случайное число в указанном интервале с указанной точностью\n *\n * @param {number} min -минимальное значение интервала\n * @param {number} max - максимальное значение интервала\n * @param {number} precision - число знаков после запятой\n *\n * @returns {number} возвращает случайное число\n */\nconst getRandomNumber = function (min = 0, max = 1000, precision = 5) {\n  if (min < 0 || max < 0 || precision < 0) {\n    min = Math.sqrt(Math.pow(min));\n    max = Math.sqrt(Math.pow(max));\n    precision = Math.sqrt(Math.pow(precision));\n  }\n  if (min > max) {\n    return (((Math.random()* (min-max))+ max).toFixed(precision));\n  }else {\n    return (((Math.random()* (max-min))+ min).toFixed(precision));\n  }\n}\n\n/**\n * Функция, создающая элемент с заданным классом и текстовым содержимым, при наличии\n *\n * @param {string} tagName - имя тэга\n * @param {string} className - класс элемента\n * @param {string} text - текстовое содержимое\n *\n * @returns возвращает созданный Html элемент\n */\nconst createElement = (tagName, className, text) => {\n  const element = document.createElement(tagName);\n  if (className) {\n    element.classList.add(className);\n  }\n  if (text) {\n    element.textContent = text;\n  }\n  return element;\n};\n\n/**\n * Функция показывает сообщение об ошибке\n *\n * * @param {number} alertShowTime  - время показа в милисекундах\n */\nconst showAlert = (alertShowTime) => {\n  const alertContainer = document.createElement('div');\n  alertContainer.style.zIndex = 100;\n  alertContainer.style.position = 'absolute';\n  alertContainer.style.left = 0;\n  alertContainer.style.top = 0;\n  alertContainer.style.right = 0;\n  alertContainer.style.padding = '10px 3px';\n  alertContainer.style.fontSize = '30px';\n  alertContainer.style.textAlign = 'center';\n  alertContainer.style.backgroundColor = 'red';\n\n  alertContainer.textContent = 'Произошла ошибка!';\n\n  document.body.append(alertContainer);\n\n  setTimeout(() => {\n    alertContainer.remove();\n  }, alertShowTime);\n};\n\n/**\n * Функция, выполняющая переданный колбэк после указанной задержки\n * @param {function} callback - функция, которую необходимо запустить после задержки\n * @param {*} timeout - задержка\n *\n * @returns результат работы функции устанавливающей таймер на выполнение колбэка\n */\nconst debounce = (callback, timeout) => {\n  let timeoutId = {};\n  const setEventTimeout = () => {\n    clearTimeout(timeoutId)\n    timeoutId = setTimeout(callback, timeout)\n  }\n  return setEventTimeout();\n}\n\n\nexport {getRandomNumber, createElement, showAlert, debounce};\n","const mapFiltersForm = document.querySelector('.map__filters');\nconst mapSelects =  mapFiltersForm.querySelectorAll('.map__filter');\nconst housingTypeFilter = mapFiltersForm.querySelector('#housing-type');\nconst housingPriceFilter = mapFiltersForm.querySelector('#housing-price');\nconst housingRoomsFilter = mapFiltersForm.querySelector('#housing-rooms');\nconst housingQuestsFilter = mapFiltersForm.querySelector('#housing-guests');\nconst mapCheckboxes = mapFiltersForm.querySelectorAll('.map__checkbox');\n\n/**\n * Функция фильтрует полученные данные по типу жилья\n *\n * @param {object} data - данные для фильтрации\n *\n * @returns {bject} filtredData - отфильтрованные данные\n */\nconst filterByHousingType = (data) => {\n  const currentValue = housingTypeFilter.value;\n  let filteredData = [];\n  filteredData = data.filter((object) => {\n    return object.offer.type === currentValue;\n  })\n  return filteredData;\n};\n\n/**\n * Функция определяет ценовой интервал по которому произойдет сортировка\n *\n * @param {number} value - значение которое будет проходить проверку на принадлежностиь интервалу при сортировке\n *\n * @returns выражение для проверки принадлежности значения интервалу\n */\nconst determinePriceInterval = (value) => {\n  switch (housingPriceFilter.value) {\n    case 'low':\n      return value <= 10000;\n    case 'middle':\n      return value > 10000 && value <= 50000;\n    case 'high':\n      return value >= 50000;\n  }\n}\n/**\n * Функция фильтрует полученные данные по  цене за ночь\n *\n * @param {object} data - данные для фильтрации\n *\n * @returns {bject} filtredData - отфильтрованные данные\n */\nconst filterByHousingPrice = (data) => {\n  let filteredData = [];\n  filteredData = data.filter((object) => {\n    return determinePriceInterval(object.offer.price);\n  });\n  return filteredData;\n};\n\n/**\n * Функция фильтрует полученные данные по количеству комнат\n *\n * @param {object} data - данные для фильтрации\n *\n * @returns {bject} filtredData - отфильтрованные данные\n */\nconst filterByHousingRooms = (data) => {\n  const currentValue = housingRoomsFilter.value;\n  let filteredData = [];\n  filteredData = data.filter((object) => {\n    return object.offer.rooms.toString() === currentValue;\n  })\n  return filteredData;\n};\n\n/**\n * Функция определяет вместимость по которой произойдет сортировка\n *\n * @param {number} value - значение которое будет проходить проверку при сортировке\n *\n * @returns выражение для проверки принадлежности значения интервалу\n */\nconst determineCapacity = (value) => {\n  switch (housingQuestsFilter.value) {\n    case '0':\n      return value > 2;\n    case '1':\n      return value === 1;\n    case '2':\n      return value === 2;\n  }\n};\n\n/**\n * Функция фильтрует полученные данные по колучеству гостей\n *\n * @param {object} data - данные для фильтрации\n *\n * @returns {bject} filtredData - отфильтрованные данные\n */\nconst filterByHousingGuests = (data) => {\n  let filteredData = [];\n  filteredData = data.filter((object) => {\n    return determineCapacity(object.offer.guests);\n  })\n  return filteredData;\n}\n\n/**\n * Функция фильтрует полученные данные по наличию дополнительных преимуществ\n *\n * @param {object} data - данные для фильтрации\n *\n * @returns {bject} filtredData - отфильтрованные данные\n */\nconst filterByAdditionalFeatures = (data) => {\n  mapCheckboxes.forEach((checkbox) => {\n    if (checkbox.checked) {\n      data = data.filter((object) => {\n        const hasOfferFeature = object.offer.features.some(value => value === checkbox.value)\n        return hasOfferFeature;\n      })\n    }\n  });\n  return data;\n}\n\n/**\n * Функция фильтрует полученные данные по всем выставленным фильтрам\n *\n * @param {object} data - данные для фильтрации\n *\n * @returns {bject} filtredData - отфильтрованные данные\n */\nconst filterOffers = (data) => {\n  let filteredData = data.slice();\n  if (housingTypeFilter.value != 'any') {\n    filteredData = filterByHousingType(filteredData)\n  }\n  if (housingPriceFilter.value != 'any') {\n    filteredData = filterByHousingPrice(filteredData);\n  }\n  if (housingRoomsFilter.value != 'any') {\n    filteredData = filterByHousingRooms(filteredData);\n  }\n  if (housingQuestsFilter.value != 'any') {\n    filteredData = filterByHousingGuests(filteredData);\n  }\n  filteredData = filterByAdditionalFeatures(filteredData)\n  return filteredData;\n};\n\n/**\n * Функция фильтрует данные по событию change и передает их в другую функцию для дальнейшей обработки\n *\n * @param {object} data - данные для фильтрации\n * @param {function} callback - функция обрабатывающая отфильтрованные данные\n */\nconst setFiltering = (data, callback) => {\n  const filters = Array.from(mapSelects).concat(Array.from(mapCheckboxes))\n  filters.forEach((filter) => {\n    filter.addEventListener('change', () => {\n      let filteredData = filterOffers(data);\n      callback(filteredData)\n    })\n  })\n}\n\n\nexport {setFiltering};\n","/**\n * отправляет GET запрос на сервер и обрабатывает данные\n *\n * @param {function} onError - функция, которая выполнится при ошибке получении данных\n * @param {function} onError - функция, которая выполнится при успешном получении данных\n *\n */\nconst getData = (onSuccess, onError) => {\n  fetch('https://22.javascript.pages.academy/keksobooking/data')\n    .then((response) => {\n      if (response.status === 200) {\n        return response.json();\n      }else {\n        throw new Error('Не удалось получить данные');\n      }\n    })\n    .then((data) => {\n      onSuccess(data);\n    }).\n    catch((error) => {\n      onError(error)\n    });\n}\n/**\n * Отправляет данные методом POST\n *\n * @param {object} data - данные, отправляемые на сервер\n * @param {function} onSuccess - функция, которая выполнится при успешной отправке данных\n * @param {function} onSuccess - функция, которая выполнится при ошибке отправки данных\n */\nconst sendData = (data, onSuccess, onError) => {\n  fetch('https://22.javascript.pages.academy/keksobooking/data',\n    {\n      method: 'POST',\n      headers:\n      {\n        'Content-Type': 'multipart/form-data',\n      },\n      body: data,\n    },\n  )\n    .then((response) => {\n      if( response.ok) {\n        onSuccess();\n      }else{\n        onError();\n      }\n    })\n    .catch(() => {\n      onError();\n    })\n};\n\nexport {sendData, getData};\n","import {makeFormsInactive, makeAddFormActive, configureAddForm, setAddressFieldValue, makeMapFiltersFormActive} from './form.js';\nimport {initializeMap, createMainMarker, renderOffersMarkers, mainMarker} from './map.js';\nimport {getData, sendData} from './api.js';\nimport {createPopupElement} from './popup.js';\nimport {setFiltering} from './map-filtering-form.js';\nimport {showAlert, debounce} from './util.js';\n\nconst RENDER_DELAY = 500; //задержка перед отрисовкой маркеров на карте\n/**\n * Делает формы неактивными до инициализации карты.\n */\nmakeFormsInactive();\n\n/**\n * Инициализирует карту и делает формы активными при успешной загрузке.\n */\ninitializeMap(makeAddFormActive);\n\n/**\n * Добавляет главный маркер и синхронизирует поле 'Адрес' со значениями позиции главного маркера.\n */\ncreateMainMarker(setAddressFieldValue);\n\n/**\n * Настраивает форму добавления нового объявления\n */\nconfigureAddForm(mainMarker, sendData);\n\n/**\n * Делает запрос на сервер, создает на карте метки объявлений со всплывающими попапами,\n * активирует форму с фильтрами и позволяет фильтровать объявления, обновляя результат с задержкой после последнего изменения\n */\ngetData(\n  (data) => {\n    renderOffersMarkers(data, createPopupElement);\n    makeMapFiltersFormActive();\n    setFiltering(data, (filteredData) => {\n      debounce(() => renderOffersMarkers(filteredData, createPopupElement), RENDER_DELAY)\n    });\n  },\n  showAlert,\n);\n"],"sourceRoot":""}